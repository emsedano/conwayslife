{"name":"Conwayslife","tagline":"Conway's life implementation","body":"conwayslife\r\n===========\r\n\r\nConway's life implementation\r\n\r\nThe Game of Life is not your typical computer game. It is a 'cellular automaton', and was invented by Cambridge mathematician John Conway.\r\n\r\nThe Rules\r\nFor a space that is 'populated':\r\n\r\n    Each cell with one or no neighbors dies, as if by loneliness.\r\n    Each cell with four or more neighbors dies, as if by overpopulation.\r\n    Each cell with two or three neighbors survives.\r\n\r\nFor a space that is 'empty' or 'unpopulated'\r\n\r\n    Each cell with three neighbors becomes populated.\r\n    \r\nWhatch live [Demo](http://jsfiddle.net/emsedano/4835jcnm/7/ \"Live demo\")\r\n                   \r\n\r\n ```\r\n//====================== Cell object ================================\r\n\r\nfunction Cell(x, y, populated) {\r\n    this.px = x;\r\n    this.py = y;\r\n    this.isGoner = false;\r\n    this.isPregned = false;\r\n\r\n\r\n    if (populated) this.populated = populated;\r\n    else this.populated = false;\r\n}\r\n\r\nCell.prototype.setPopulate = function (val) {\r\n    this.populated = val;\r\n};\r\n\r\nCell.prototype.isPopulated = function () {\r\n    return this.populated;\r\n};\r\n\r\nCell.prototype.willDie = function () {\r\n    this.isGoner = true;\r\n    this.isPregned = false;\r\n};\r\n\r\nCell.prototype.resetState = function () {\r\n    this.isGoner = false;\r\n    this.isPregned = false;\r\n};\r\n\r\nCell.prototype.fertilize = function () {\r\n    this.isGoner = false;\r\n    this.isPregned = true;\r\n};\r\n\r\n\r\n//================================= ENVIRONMENT =================================\r\n\r\nfunction Environment(w, h, target) {\r\n    this.target = $(target);\r\n    this.w = w;\r\n    this.h = h;\r\n\r\n    this.fields = new Array(w);\r\n\r\n    for (var i = 0; i < w; i++) {\r\n        //define cada elemento como una matriz de longitud w\r\n        this.fields[i] = new Array(h);\r\n        for (var j = 0; j < h; j++) {\r\n            /* asigna a cada elemento de la matriz bidimensional \r\n             * los valores de i y j */\r\n            this.fields[i][j] = new Cell(i, j);\r\n        }\r\n    }\r\n}\r\n\r\nEnvironment.prototype.NORTH = 'N';\r\nEnvironment.prototype.NOREAST = 'NE';\r\nEnvironment.prototype.NORWEST = 'NW';\r\nEnvironment.prototype.SOUTH = 'S';\r\nEnvironment.prototype.SOUTHEAST = 'SE';\r\nEnvironment.prototype.SOUTHWEST = 'SW';\r\nEnvironment.prototype.EAST = 'E';\r\nEnvironment.prototype.WEST = 'W';\r\n\r\nEnvironment.prototype.init = function () {\r\n\r\n    var tr = \"\";\r\n    var td = \"\";\r\n    var css = \"\";\r\n    for (i = 0; i < this.w; i++) {\r\n\r\n        tr = \"<tr id='row_\" + i + \"'>\";\r\n        td = \"\";\r\n\r\n        for (j = 0; j < this.h; j++) {\r\n            css = \"\";\r\n            if (this.getCell(i, j) !== null && this.getCell(i, j).isPopulated()) css = \"alive\";\r\n            td += \"<td class='\" + css + \"' ondblclick='ConwaysLifeGame.togglePopulated(\" + i + \",\" + j + \");'></td>\";\r\n\r\n        }\r\n\r\n        tr += td;\r\n        tr += \"</tr>\";\r\n\r\n        this.target.append(tr);\r\n    }\r\n};\r\n\r\nEnvironment.prototype.refreshEnvironment = function () {\r\n    this.target.html(\"\");\r\n    this.init();\r\n};\r\n\r\nEnvironment.prototype.setCell = function (Cell) {\r\n    if (this.fields[Cell.px][Cell.py] === null) this.fields[Cell.px][Cell.py] = Cell;\r\n};\r\n\r\nEnvironment.prototype.getCell = function (x, y) {\r\n    return this.fields[x][y];\r\n};\r\n\r\nEnvironment.prototype.hasNeighborAt = function (Cell, DIR) {\r\n\r\n    var neighborgCell = this.doesCellExist(Cell, DIR);\r\n\r\n    if (neighborgCell) return neighborgCell.isPopulated();\r\n\r\n    return false;\r\n\r\n};\r\n\r\nEnvironment.prototype.doesCellExist = function (Cell, DIR) {\r\n\r\n    if (Cell) {\r\n\r\n        if (DIR === this.NORTH && Cell.px > 0) {\r\n            //NORTH\r\n            return this.getCell(Cell.px - 1, Cell.py);\r\n\r\n        } else if (DIR === this.SOUTH && Cell.px < this.h - 1) {\r\n            //SOUTH\r\n            return this.getCell(Cell.px + 1, Cell.py);\r\n\r\n        } else if (DIR === this.EAST && Cell.py < this.w - 1) {\r\n            //EAST\r\n            return this.getCell(Cell.px, Cell.py + 1);\r\n\r\n        } else if (DIR === this.WEST && Cell.py > 0) { /// West default\r\n            //WEST\r\n            return this.getCell(Cell.px, Cell.py - 1);\r\n\r\n        } else if (DIR === this.NOREAST) {\r\n            //NOREAST\r\n            return this.doesCellExist(this.doesCellExist(Cell, this.NORTH), this.EAST);\r\n\r\n        } else if (DIR === this.NORWEST) {\r\n            //NORWEST\r\n            return this.doesCellExist(this.doesCellExist(Cell, this.NORTH), this.WEST);\r\n\r\n        } else if (DIR === this.SOUTHEAST) {\r\n            //SOUTHEAST\r\n            return this.doesCellExist(this.doesCellExist(Cell, this.SOUTH), this.EAST);\r\n\r\n        } else if (DIR === this.SOUTHWEST) {\r\n            //SOUTHWEST\r\n            return this.doesCellExist(this.doesCellExist(Cell, this.SOUTH), this.WEST);\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    } else {\r\n        return false;\r\n    }\r\n\r\n\r\n};\r\n\r\nEnvironment.prototype.countNeighbors = function (Cell) {\r\n    var neighborgs = 0;\r\n    if (this.hasNeighborAt(Cell, this.NORTH)) neighborgs++;\r\n    if (this.hasNeighborAt(Cell, this.NOREAST)) neighborgs++;\r\n    if (this.hasNeighborAt(Cell, this.NORWEST)) neighborgs++;\r\n    if (this.hasNeighborAt(Cell, this.SOUTH)) neighborgs++;\r\n    if (this.hasNeighborAt(Cell, this.SOUTHEAST)) neighborgs++;\r\n    if (this.hasNeighborAt(Cell, this.SOUTHWEST)) neighborgs++;\r\n    if (this.hasNeighborAt(Cell, this.EAST)) neighborgs++;\r\n    if (this.hasNeighborAt(Cell, this.WEST)) neighborgs++;\r\n\r\n    return neighborgs;\r\n};\r\n\r\n\r\n//================= Conways life object ========================\r\n\r\nvar ConwaysLifeGame = {\r\n\r\n    environment: null,\r\n    daysGoBy: null,\r\n    running: false,\r\n    lifeCycles: 0,\r\n\r\n    setUp: function () {\r\n        ConwaysLifeGame.environment = new Environment(50, 50, \"#environment\");\r\n        ConwaysLifeGame.environment.init();\r\n    },\r\n\r\n    start: function () {\r\n        ConwaysLifeGame.running = true;\r\n        if (ConwaysLifeGame.daysGoBy === null) ConwaysLifeGame.daysGoBy = setInterval(function () {\r\n            ConwaysLifeGame.executeLifeCicle();\r\n        }, 500);\r\n    },\r\n\r\n    pause: function () {\r\n        ConwaysLifeGame.running = false;\r\n    },\r\n\r\n    stop: function () {\r\n        clearInterval(ConwaysLifeGame.daysGoBy);\r\n        ConwaysLifeGame.pause();\r\n        ConwaysLifeGame.daysGoBy = null;\r\n    },\r\n\r\n    isNotZeroGeneration: function () {\r\n        if (ConwaysLifeGame.lifeCycles > 0) return true;\r\n        else return false;\r\n    },\r\n\r\n    executeLifeCicle: function () {\r\n\r\n        if (ConwaysLifeGame.running) {\r\n\r\n            if (ConwaysLifeGame.isNotZeroGeneration()) ConwaysLifeGame.prepareEnvironment();\r\n\r\n\r\n            var _env = ConwaysLifeGame.environment;\r\n            var cell = null;\r\n\r\n            var i, j;\r\n            for (i = 0; i < _env.fields.length; i++) {\r\n                for (j = 0; j < _env.fields[i].length; j++) {\r\n\r\n                    cell = _env.getCell(i, j);\r\n\r\n                    if (cell.isPopulated()) {\r\n                        ConwaysLifeGame.evaluatePopulatedCell(cell);\r\n                    } else {\r\n                        ConwaysLifeGame.evaluateUnpopulatedCell(cell);\r\n                    }\r\n                }\r\n            }\r\n\r\n            _env.refreshEnvironment();\r\n\r\n        }\r\n\r\n        ConwaysLifeGame.lifeCycles++;\r\n    },\r\n\r\n    prepareEnvironment: function () {\r\n        var _env = ConwaysLifeGame.environment;\r\n        var cell = null;\r\n        var i, j;\r\n        for (i = 0; i < _env.fields.length; i++) {\r\n            for (j = 0; j < _env.fields[i].length; j++) {\r\n\r\n                cell = _env.getCell(i, j);\r\n\r\n                if (cell.isGoner) cell.setPopulate(false);\r\n                else if (cell.isPregned) cell.setPopulate(true);\r\n\r\n            }\r\n        }\r\n    },\r\n\r\n    evaluatePopulatedCell: function (cell) {\r\n\r\n        var neighbors = ConwaysLifeGame.environment.countNeighbors(cell);\r\n\r\n        if (neighbors <= 1) { // Each cell with one or no neighbors dies, as if by loneliness.\r\n            cell.willDie();\r\n        } else if (neighbors >= 4) {\r\n            // Each cell with four or more neighbors dies, as if by overpopulation.\r\n            cell.willDie(false);\r\n        }\r\n        // else Each cell with two or three neighbors survives.\r\n    },\r\n\r\n    evaluateUnpopulatedCell: function (cell) {\r\n        // Each cell with three neighbors becomes populated.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \t\t   \r\n        if (ConwaysLifeGame.environment.countNeighbors(cell) == 3) { // Each cell with one or no neighbors dies, as if by loneliness.\r\n            cell.fertilize();\r\n        }\r\n    },\r\n\r\n    togglePopulated: function (x, y) {\r\n        if (ConwaysLifeGame.environment.getCell(x, y).isPopulated()) ConwaysLifeGame.environment.getCell(x, y).setPopulate(false);\r\n        else ConwaysLifeGame.environment.getCell(x, y).setPopulate(true);\r\n\r\n        ConwaysLifeGame.environment.refreshEnvironment();\r\n    }\r\n};\r\n\r\n ```\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}